package frc.robot.commands.auto;

import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.shuffleboard.ShuffleboardTab;
import edu.wpi.first.wpilibj.trajectory.TrapezoidProfile;
//WPI imports
import edu.wpi.first.wpilibj2.command.CommandBase;
import edu.wpi.first.wpilibj2.command.Subsystem;
//RobotContainer import
import frc.robot.RobotContainer;
import frc.robot.subsystems.Arm;

//Subsystem imports
import frc.robot.subsystems.OmniDrive;
import frc.robot.Globals;

/**
 * SimpleDrive class
 * <p>
 * This class drives a motor
 */
public class MoveArm extends CommandBase {
    // Grab the subsystem instance from RobotContainer
    private final static Arm m_arm = RobotContainer.m_arm;
    private double dT = 0.02;
    private boolean m_endFlag = false;
    private int m_profType;
    private TrapezoidProfile.Constraints m_constraints;
    private TrapezoidProfile.State m_goal = new TrapezoidProfile.State();
    private TrapezoidProfile.State m_setpoint = new TrapezoidProfile.State();
    private int m_dir;
    public static double distMoved;
    private final double _startSpeed;
    private double _setAngle1;
    private final double _maxSpeed;
    private final double _endSpeed;



    /**
     * Constructor
     */
    // This move the robot a certain distance following a trapezoidal speed profile.
    public MoveArm(double setAngle1, double startSpeed, double endSpeed, double maxSpeed) {
        _startSpeed = startSpeed;
        _setAngle1 = setAngle1;
        _maxSpeed = maxSpeed;
        _endSpeed = endSpeed;
        m_constraints = new TrapezoidProfile.Constraints(maxSpeed, 180);

        m_setpoint = new TrapezoidProfile.State(0, _startSpeed);

        // Negative distance don't seem to work with the library function????
        // Easier to make distance positive and use m_dir to keep track of negative
        // speed.


        addRequirements(m_arm); // Adds the subsystem to the command

    }

    /**
     * Runs before execute
     */
    @Override
    public void initialize() {
        _setAngle1 = _setAngle1 - Globals.curAngle1;
        m_dir = (_setAngle1 > 0) ? 1 : -1;
        _setAngle1 *= m_dir;
        m_goal = new TrapezoidProfile.State(_setAngle1, _endSpeed);
        m_setpoint = new TrapezoidProfile.State(0, _startSpeed);
        m_endFlag = false;
    }
    /**
     * Condition to end speed profile
     */
    public boolean endCondition()
    {
        return false;
    }
    /**
     * Called continously until command is ended
     */
        
    @Override
    public void execute()
    {
        //Create a new profile to calculate the next setpoint(speed) for the profile
        var profile = new TrapezoidProfile(m_constraints, m_goal, m_setpoint);
        m_setpoint = profile.calculate(dT);
        Globals.curAngle1 += m_setpoint.velocity*dT*m_dir;
        m_arm.setServo1Angle(Globals.curAngle1);
        //m_arm.setServo2Angle(0);
        

        if ((m_setpoint.position>=m_goal.position) || endCondition()) {
            //distance reached or end condition met. End the command
            //This class should be modified so that the profile can end on other conditions like
            //sensor value etc.
            m_arm.setServo1Angle(Globals.curAngle1);
            m_endFlag = true;
        }
        

        

    }

    /**
     * Called when the command is told to end or is interrupted
     */
    @Override
    public void end(boolean interrupted)
    {
       
    }

    /**
     * Creates an isFinished condition if needed
     */
    @Override
    public boolean isFinished()
    {
        return m_endFlag;
    }

    public  double getDistMoved() {
        return m_setpoint.position;
    }

}